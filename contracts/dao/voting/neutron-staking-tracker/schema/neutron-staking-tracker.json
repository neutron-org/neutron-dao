{
  "contract_name": "neutron-staking-tracker",
  "contract_version": "0.2.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "description",
      "name",
      "owner"
    ],
    "properties": {
      "description": {
        "description": "Description contains information that characterizes the vault.",
        "type": "string"
      },
      "name": {
        "description": "Name contains the vault name which is used to ease the vault's recognition.",
        "type": "string"
      },
      "owner": {
        "description": "Owner can update all configs including changing the owner. This will generally be a DAO.",
        "type": "string"
      },
      "staking_proxy_info_contract_address": {
        "description": "Contract to proxy staking updates to.",
        "type": [
          "string",
          "null"
        ]
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "description": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "name": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "owner": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "staking_proxy_info_contract_address": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_to_blacklist"
        ],
        "properties": {
          "add_to_blacklist": {
            "type": "object",
            "required": [
              "addresses"
            ],
            "properties": {
              "addresses": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_from_blacklist"
        ],
        "properties": {
          "remove_from_blacklist": {
            "type": "object",
            "required": [
              "addresses"
            ],
            "properties": {
              "addresses": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "list_blacklisted_addresses"
        ],
        "properties": {
          "list_blacklisted_addresses": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "is_address_blacklisted"
        ],
        "properties": {
          "is_address_blacklisted": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "voting_power_at_height"
        ],
        "properties": {
          "voting_power_at_height": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/definitions/Addr"
              },
              "height": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "total_power_at_height"
        ],
        "properties": {
          "total_power_at_height": {
            "type": "object",
            "properties": {
              "height": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "list_delegations"
        ],
        "properties": {
          "list_delegations": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "array",
                  "null"
                ],
                "items": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "$ref": "#/definitions/Addr"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "list_validators"
        ],
        "properties": {
          "list_validators": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "description": "Configuration settings for the smart contract.\n\nThis struct holds key details about the vault, including: - `name`: The name of the vault. - `description`: A short text description of the vault. - `owner`: The address of the vault owner/admin. - `denom`: The token denomination used for delegations and governance.",
      "type": "object",
      "required": [
        "description",
        "name",
        "owner"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/Addr"
        },
        "staking_proxy_info_contract_address": {
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "is_address_blacklisted": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    },
    "list_blacklisted_addresses": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Addr",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Addr"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "list_delegations": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Array_of_Tuple_of_Tuple_of_Addr_and_Addr_and_Delegation",
      "type": "array",
      "items": {
        "type": "array",
        "items": {
          "type": "array",
          "items": [
            {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "$ref": "#/definitions/Addr"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            },
            {
              "$ref": "#/definitions/Delegation"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        }
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Delegation": {
          "description": "Represents a delegation made by a user to a validator.\n\nA delegation means that a **delegator** (user) has assigned their stake to a **validator**. - `delegator_address`: The user's wallet address that owns the stake. - `validator_address`: The operator address (`valoper`) of the validator receiving the delegation. - `shares`: The amount of **delegation shares** received in exchange for staked tokens.",
          "type": "object",
          "required": [
            "delegator_address",
            "shares",
            "validator_address"
          ],
          "properties": {
            "delegator_address": {
              "$ref": "#/definitions/Addr"
            },
            "shares": {
              "description": "The amount of shares this delegator has in the validator.\n\nStored as a `Uint128` for the same reasons as `Validator::total_shares`: - **Cosmos SDK Compatibility**: Delegator shares are serialized as large integers (scaled by `10^18`). - **Efficiency**: Avoids the need for complex conversions and floating-point arithmetic. - **Overflow Prevention**: Using `Decimal` would cause issues when working with large numbers due to its internal scaling mechanism.\n\n### Example: - `5.000000000000000000` shares in Cosmos SDK are stored as `\"5000000000000000000\"`. - `2.123456789000000000` shares are stored as `\"2123456789000000000\"`.\n\nUsing `Uint128` directly eliminates unnecessary conversion steps while ensuring compatibility.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "validator_address": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "list_validators": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Validator",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Validator"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Validator": {
          "description": "Represents a validator in the staking system.\n\nA validator is responsible for securing the network and participating in consensus. Each validator has: - `cons_address`: The **consensus address** (`valcons`), used for signing blocks. - `oper_address`: The **operator address** (`valoper`), used for staking/delegation. - `bonded`: Whether the validator is bonded (actively participating in consensus). - `total_tokens`: Total staked tokens delegated to this validator. - `total_shares`: Total delegation shares representing ownership over the staked tokens. - `active`: Whether the validator is active in the network.",
          "type": "object",
          "required": [
            "active",
            "bonded",
            "cons_address",
            "oper_address",
            "total_shares",
            "total_tokens"
          ],
          "properties": {
            "active": {
              "type": "boolean"
            },
            "bonded": {
              "type": "boolean"
            },
            "cons_address": {
              "$ref": "#/definitions/Addr"
            },
            "oper_address": {
              "$ref": "#/definitions/Addr"
            },
            "total_shares": {
              "$ref": "#/definitions/Uint128"
            },
            "total_tokens": {
              "description": "The total amount of delegator shares for this validator.\n\nStored as a `Uint128` to maintain compatibility with Cosmos SDK’s `sdk.Dec`, which is serialized as an integer without a decimal point (scaled by `10^18`).\n\n### Why `Uint128`? - **Preserves Precision**: The Cosmos SDK already scales `sdk.Dec` values by `10^18`, so `Uint128` naturally maintains precision. - **Avoids Unnecessary Transformations**: Using `Decimal` would require multiple conversions between string representations and numeric types, adding complexity and inefficiency. - **Prevents Overflow Issues**: `Decimal` in CosmWasm has limits on large numbers (e.g., `10M shares * 10^18` would overflow).\n\n### Example: In Cosmos SDK: - `1.000000000000000000` (1 with 18 decimal places) is stored as `\"1000000000000000000\"`. - `10.500000000000000000` (10.5 with 18 decimal places) is stored as `\"10500000000000000000\"`.\n\nSince Cosmos SDK stores `sdk.Dec` values as large integers, using `Uint128` prevents unnecessary conversions.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      }
    },
    "total_power_at_height": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "voting_power_at_height": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
