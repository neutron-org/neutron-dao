{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "DepositInfoResponse",
  "type": "object",
  "required": [
    "proposer"
  ],
  "properties": {
    "deposit_info": {
      "description": "The deposit that has been paid for the specified proposal.",
      "anyOf": [
        {
          "$ref": "#/definitions/CheckedDepositInfo"
        },
        {
          "type": "null"
        }
      ]
    },
    "proposer": {
      "description": "The address that created the proposal.",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "CheckedDenom": {
      "description": "A denom that has been checked to point to a valid asset. This enum should never be constructed literally and should always be built by calling `into_checked` on an `UncheckedDenom` instance.",
      "oneOf": [
        {
          "description": "A native (bank module) asset.",
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A cw20 asset.",
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CheckedDepositInfo": {
      "description": "Counterpart to the `DepositInfo` struct which has been processed. This type should never be constructed literally and should always by built by calling `into_checked` on a `DepositInfo` instance.",
      "type": "object",
      "required": [
        "amount",
        "denom",
        "refund_policy"
      ],
      "properties": {
        "amount": {
          "description": "The number of tokens that must be deposited to create a proposal. This is validated to be non-zero if this struct is constructed by converted via the `into_checked` method on `DepositInfo`.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "denom": {
          "description": "The address of the cw20 token to be used for proposal deposits.",
          "allOf": [
            {
              "$ref": "#/definitions/CheckedDenom"
            }
          ]
        },
        "refund_policy": {
          "description": "The policy used for refunding proposal deposits.",
          "allOf": [
            {
              "$ref": "#/definitions/DepositRefundPolicy"
            }
          ]
        }
      }
    },
    "DepositRefundPolicy": {
      "oneOf": [
        {
          "description": "Deposits should always be refunded.",
          "type": "string",
          "enum": [
            "always"
          ]
        },
        {
          "description": "Deposits should only be refunded for passed proposals.",
          "type": "string",
          "enum": [
            "only_passed"
          ]
        },
        {
          "description": "Deposits should never be refunded.",
          "type": "string",
          "enum": [
            "never"
          ]
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
